/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./email_signals/src/ts/signal_change_form.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./email_signals/src/ts/components/auto_complete_input.ts":
/*!****************************************************************!*\
  !*** ./email_signals/src/ts/components/auto_complete_input.ts ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var dropdownListID = function (input) {
    var id = input.id;
    if (!id) {
        id = input.name;
    }
    return id + 'autocomplete-list';
};
var autocomplete = function (input, options) {
    var currentFocus = -1;
    var inputID = dropdownListID(input);
    input.addEventListener("input", function (event) {
        var e_1, _a;
        var value = event.target.value;
        closeAllLists();
        if (!value) {
            return;
        }
        var listDiv = document.createElement("DIV");
        listDiv.setAttribute("id", inputID);
        listDiv.setAttribute("class", "autocomplete-items");
        var parentNode = input.parentNode;
        parentNode.appendChild(listDiv);
        parentNode.style.overflow = 'unset';
        try {
            for (var options_1 = __values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                var option = options_1_1.value;
                if (option.substr(0, value.length).toUpperCase() === value.toUpperCase()) {
                    var itemDiv = document.createElement("DIV");
                    itemDiv.innerHTML = "<strong>" + option.substr(0, value.length) + "</strong>";
                    itemDiv.innerHTML += option.substr(value.length);
                    itemDiv.innerHTML += "<input type=\"hidden\" value=\"".concat(option, "\">");
                    itemDiv.addEventListener("click", function (e) {
                        input.value = e.target.querySelector("input").value;
                        closeAllLists();
                    });
                    ;
                    listDiv.appendChild(itemDiv);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    input.addEventListener("keydown", function (event) {
        var listOptions = document.getElementById(inputID);
        if (listOptions) {
            listOptions = listOptions.getElementsByTagName("div");
        }
        if (event.key == 'ArrowDown') {
            currentFocus++;
            addActive(listOptions);
        }
        else if (event.key == 'ArrowUp') {
            currentFocus--;
            addActive(listOptions);
        }
        else if (event.key == 'Enter') {
            event.preventDefault();
            if (currentFocus > -1) {
                if (listOptions[currentFocus]) {
                    listOptions[currentFocus].click();
                }
            }
        }
    });
    var addActive = function (listOptions) {
        removeActive(listOptions);
        if (currentFocus >= listOptions.length) {
            currentFocus = 0;
        }
        if (currentFocus < 0) {
            currentFocus = (listOptions.length - 1);
        }
        listOptions[currentFocus].classList.add("autocomplete-active");
    };
    var removeActive = function (listOptions) {
        for (var i = 0; i < listOptions.length; i++) {
            listOptions[i].classList.remove("autocomplete-active");
        }
    };
    var closeAllLists = function () {
        var lists = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < lists.length; i++) {
            lists[i].parentNode.removeChild(lists[i]);
        }
    };
    document.addEventListener("click", closeAllLists);
};
/* harmony default export */ __webpack_exports__["default"] = (autocomplete);


/***/ }),

/***/ "./email_signals/src/ts/signal_change_form.ts":
/*!****************************************************!*\
  !*** ./email_signals/src/ts/signal_change_form.ts ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_auto_complete_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/auto_complete_input */ "./email_signals/src/ts/components/auto_complete_input.ts");
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

var getAddNewRowBtn = function () {
    var newRowBtn = document.querySelectorAll('.add-row a');
    if (!newRowBtn.length) {
        newRowBtn = document.querySelectorAll('.grp-add-handler');
    }
    if (!newRowBtn.length) {
        console.warn('Could not find add new row button.');
    }
    return newRowBtn;
};
var ParamInputs = (function () {
    function ParamInputs() {
        var _this = this;
        this.inputsRegistry = {};
        this.deleteBtnsRegistry = new Set();
        this.inputRows = function () { return +document.querySelector('#id_constraints-TOTAL_FORMS').value; };
        this.addInput = function (input) {
            _this.inputsRegistry[input.name] = input;
        };
        this.deleteInput = function (input) {
            delete _this.inputsRegistry[input.name];
        };
        this.getInput = function (name) {
            return _this.inputsRegistry[name];
        };
        this.inputList = function () {
            return Object.values(_this.inputsRegistry);
        };
        this.flushRegistry = function () {
            _this.inputsRegistry = {};
            _this.deleteBtnsRegistry = new Set();
        };
        this.registerDeleteBtns = function () {
            var deleteBtns = document.querySelectorAll('.inline-deletelink');
            for (var i = 0; i < deleteBtns.length; i++) {
                var btn = deleteBtns[i];
                if (!_this.deleteBtnsRegistry.has(btn)) {
                    _this.deleteBtnsRegistry.add(btn);
                    btn.addEventListener('click', _this.rebuildAll);
                }
            }
        };
        this.addInputsToRegistry = function () {
            for (var i = 0; i < _this.inputRows(); i++) {
                var param_1 = document.querySelector("#id_constraints-".concat(i, "-param_1"));
                var param_2 = document.querySelector("#id_constraints-".concat(i, "-param_2"));
                if (param_1) {
                    _this.addInput(param_1);
                }
                if (param_2) {
                    _this.addInput(param_2);
                }
            }
        };
        this.setDeleteBtnEventListeners = function () {
            _this.deleteBtnsRegistry.forEach(function (btn) {
                btn.removeEventListener('click', _this.rebuildAll);
                btn.addEventListener('click', _this.rebuildAll);
            });
        };
        this.setNewRowEventListener = function () {
            var addNewRowBtn = getAddNewRowBtn();
            if (!addNewRowBtn) {
                console.warn('Could not find the add new row button. Auto complete feature will not work.');
                return;
            }
            addNewRowBtn.forEach(function (btn) { return btn.addEventListener('click', _this.rebuildAll); });
        };
        this.rebuildAll = function () {
            _this.flushRegistry();
            _this.addInputsToRegistry();
            _this.registerDeleteBtns();
            _this.setDeleteBtnEventListeners();
        };
        this.setNewRowEventListener();
        this.rebuildAll();
    }
    return ParamInputs;
}());
var ContentTypeSetup = (function () {
    function ContentTypeSetup(inputElems) {
        var _this = this;
        this.CONTENT_TYPE_SELECT_ELEM = document.getElementById('id_content_type');
        this.MODEL_ATTRS_API_URL = document.getElementById('model_attrs_api_url').value;
        this.inputOptions = [];
        this.setInputOptions = function () {
            return _this.callApi()
                .then(function (data) {
                _this.inputOptions = _this.getAvailableInputs(data);
                _this.inputElems().forEach(function (input) {
                    Object(_components_auto_complete_input__WEBPACK_IMPORTED_MODULE_0__["default"])(input, _this.inputOptions);
                });
            });
        };
        this.getContentTypeId = function () { return _this.CONTENT_TYPE_SELECT_ELEM.value; };
        this.callApi = function () {
            var url = _this.MODEL_ATTRS_API_URL.replace('<content_type_id>', _this.getContentTypeId());
            return fetch(url)
                .then(function (response) { return response.json(); })
                .then(function (data) { return data; });
        };
        this.getAvailableInputs = function (all_inputs, prefix) {
            if (prefix === void 0) { prefix = null; }
            var options = [];
            for (var key in all_inputs) {
                var _prefix = prefix ? "".concat(prefix, ".").concat(key) : key;
                options.push(_prefix);
                if (Object.keys(all_inputs[key]).length) {
                    options.push.apply(options, __spreadArray([], __read(_this.getAvailableInputs(all_inputs[key], _prefix)), false));
                }
            }
            return options;
        };
        this.hasModelAttrsUrl = this.MODEL_ATTRS_API_URL.length > 0;
        this.inputElems = inputElems;
        this.setInputOptions();
    }
    ContentTypeSetup.prototype.setUpEventListener = function () {
        var _this = this;
        if (!this.hasModelAttrsUrl)
            return;
        this.CONTENT_TYPE_SELECT_ELEM.addEventListener('change', this.setInputOptions);
        var newRowBtn = getAddNewRowBtn();
        if (newRowBtn) {
            newRowBtn.forEach(function (btn) { return btn.addEventListener('click', _this.setInputOptions); });
        }
    };
    return ContentTypeSetup;
}());
setTimeout(function () {
    var paramInputs = new ParamInputs();
    new ContentTypeSetup(paramInputs.inputList).setUpEventListener();
}, 500);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,